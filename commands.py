import nextcord
import aiohttp
import random
from nextcord.ext import commands
from datetime import datetime, timedelta, timezone

class MyCommands(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
    
    # Auto Welcome Command
        self.welcome_messages = [
           
            # Generated by ChatGPT.
            "Welcome to the server, {user.mention}! 🎉 We're excited to have you here!",
            "Hey {user.mention}, glad you joined us! 😊",
            "Everyone, please welcome {user.mention}! 🎉",
            "What's up, {user.mention}? Welcome home 😉",
            "Welcome, {user.mention}! We're happy to see ya 🤗",
            "Hey {user.mention}! Let's have some fun!",
            "{user.mention} just jooooooined the server 🤩",
            "{user.mention} is here! Let's give him a warm welcome 🙋‍♂️",
            "Everyone plzz make some noise for {user.mention}!!!",
            "Welcome to the party {user.mention} 🎇🎆🔥",
            "Hello {user.mention}, welcome! Feel free to look around 👀",
            "{user.mention} just joined the party!!!",
            "Woah... {user.mention} looking cool today 😎"
            "A big welcome to you, {user.mention}! 🌟 Let's make some great memories together!"
            "We're thrilled to have you here, {user.mention}! 🎉 Dive right in!"
            "Welcome aboard, {user.mention}! 🚀 Fasten your seatbelt, it's going to be a fun ride!"
            "Hello {user.mention}, welcome! You've just unlocked a new adventure! 🗝️"
            "{user.mention} just stepped into the party! 🎊 Let's give a warm welcome!"
            "Hey {user.mention}! Welcome to our awesome community! 🙌"
            "Look who's here! Welcome, {user.mention} 😊. Let's make today awesome!"
            "So glad you joined us, {user.mention}! 💫 Let's make this place your second home!"
            "What's poppin', {user.mention}? Welcome to the crew! 🎤"
            "Yo {user.mention}, welcome! Ready to level up your experience here? 🎮"
            "Cheers to new beginnings, {user.mention}! 🍻 Welcome aboard!"
            "{user.mention}, you've made it! 🎯 Welcome and let's get started!"
            "A warm welcome to {user.mention}! 🔥 We're glad to have you here!"
            "Guess who's here? It's {user.mention}! 🎉 Let's roll out the welcome mat!"
            "Hey {user.mention}, we're all excited to see you here! 💥 Welcome!"
            "Welcome to the family, {user.mention}! 🏠 Let's have a blast together!"
            "{user.mention} just landed! 🚁 Welcome to the best server in town!"
            "What a pleasant surprise, {user.mention}! 😃 Welcome to our squad!"
            "Hey there, {user.mention}! 🌟 The fun just got doubled with you here!"
            "{user.mention} is now part of the gang! 💪 Let's give a warm shout-out!"]

    @commands.Cog.listener()
    async def on_member_join(self, member: nextcord.Member):
        channel = nextcord.utils.get(member.guild.text_channels, name='🧩-lobby')
        if channel:
            message = random.choice(self.welcome_messages).format(user=member)
            await channel.send(message)

    # /smiley Command
    @nextcord.slash_command(name="smiley", description="Responds with a smiley")
    async def smile(self, interaction: nextcord.Interaction):
        await interaction.response.send_message("😃")

    # /roll Command
    @nextcord.slash_command(name="roll", description="Rolls a dice")
    async def roll(self, interaction: nextcord.Interaction):
        roll_result = random.randint(1, 6)
        await interaction.response.send_message(f"You rolled a {roll_result}!")

    # /clear Command
    @nextcord.slash_command(name="clear", description="Clears a specified number of messages")
    async def clear(self, interaction: nextcord.Interaction, amount: int):
        if amount < 1 or amount > 5000:
            await interaction.response.send_message("Please specify a number between 1 and 5000.", ephemeral=True)
            return

        try:
            messages = await interaction.channel.history(limit=amount + 1).flatten()
            messages_to_delete = [msg for msg in messages if msg.id != interaction.id]
            if len(messages_to_delete) > 0:
                await interaction.channel.delete_messages(messages_to_delete[:amount])
            await interaction.response.send_message(f"Requested to delete {amount} message(s).", ephemeral=True)
        except Exception as e:
            await interaction.response.send_message("An error occurred while deleting messages.", ephemeral=True)
            print(f"Error clearing messages: {e}")

    # /joke Command
    @nextcord.slash_command(name="joke", description="Fetches a random joke")
    async def joke(self, interaction: nextcord.Interaction):
        async with aiohttp.ClientSession() as session:
            headers = {"Accept": "application/json"}
            async with session.get('https://v2.jokeapi.dev/joke/Dark?type=single', headers=headers) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    joke = data.get('joke')
                    if joke:
                        await interaction.response.send_message(joke)
                    else:
                        await interaction.response.send_message("Couldn't fetch a joke at the moment. Please try again later.")
                else:
                    await interaction.response.send_message("Couldn't fetch a joke at the moment. Please try again later.")

    # /userinfo Command
    @nextcord.slash_command(name="userinfo", description="Shows information about an user")
    async def userinfo(self, interaction: nextcord.Interaction, user: nextcord.User = None):
        if user is None:
            user = interaction.user

        member = interaction.guild.get_member(user.id)
        
        if member is None:
            await interaction.response.send_message("User not found in the server.", ephemeral=True)
            return

        try:
            now = datetime.now(timezone.utc)
            joined_at = member.joined_at
            duration_days = (now - joined_at).days

            if duration_days == 0:
                member_status = "Member Since"
                member_duration = "Today"
            elif duration_days == 1:
                member_status = "Member Since"
                member_duration = "Yesterday"
            else:
                member_status = "Member For"
                member_duration = f"{duration_days} days"

            roles = [role.mention for role in member.roles if role.name != "@everyone"]
            roles = roles if roles else ["Not Assigned"]

            embed = nextcord.Embed(title=f"User Info - {member.name}", color=nextcord.Color.blue())
            embed.set_thumbnail(url=user.avatar.url)
            embed.add_field(name="Username", value=f"{member.display_name}", inline=False)
            embed.add_field(name="Account Created", value=user.created_at.strftime("%Y/%m/%d"), inline=False)
            embed.add_field(name="Joined Server", value=joined_at.strftime("%Y/%m/%d"), inline=False)
            embed.add_field(name=member_status, value=member_duration, inline=False)
            embed.add_field(name="Roles", value=", ".join(roles), inline=False)

            await interaction.response.send_message(embed=embed)
        except AttributeError as e:
            await interaction.response.send_message("An attribute error occurred while fetching user info.", ephemeral=True)
            print(f"AttributeError fetching user info: {e}")
        except Exception as e:
            await interaction.response.send_message("An error occurred while fetching user info.", ephemeral=True)
            print(f"Error fetching user info: {e}")

    # /timeout Command
    @nextcord.slash_command(name="timeout", description="Timeout an user for a specified duration")
    async def timeout(self, interaction: nextcord.Interaction, user: nextcord.Member, duration: int, unit: str):
        time_units = {
            's': timedelta(seconds=duration),
            'm': timedelta(minutes=duration),
            'h': timedelta(hours=duration),
            'd': timedelta(days=duration)
        }
        
        if unit not in time_units:
            await interaction.response.send_message("Invalid time unit. Use 's' for seconds, 'm' for minutes, 'h' for hours, or 'd' for days.", ephemeral=True)
            return

        try:
            await interaction.response.defer(ephemeral=True)
            await user.timeout(time_units[unit])
            await interaction.followup.send(f"{user.mention} has been timed out for {duration}{unit}.")
        except nextcord.Forbidden:
            await interaction.followup.send("I don't have permission to timeout this user.", ephemeral=True)
        except Exception as e:
            await interaction.followup.send("An error occurred while timing out the user.", ephemeral=True)
            print(f"Error timing out user: {e}")

    # /choose Command
    @nextcord.slash_command(name="choose", description="Chooses one option from a comma-separated list of choices")
    async def choose(self, interaction: nextcord.Interaction, choices: str):
        options = [choice.strip() for choice in choices.split(',') if choice.strip()]

        if len(options) < 2:
            await interaction.response.send_message("You must provide at least two choices separated by commas.", ephemeral=True)
            return
        
        chosen_option = random.choice(options)
        embed = nextcord.Embed(
            title="Choice Made!",
            description=f"I have chosen **{chosen_option}** ",
            color=nextcord.Color.blue()
        )
       
        embed.add_field(name="Choices Provided:", value="\n".join([f"- {option}" for option in options]), inline=False)

        await interaction.response.send_message(embed=embed)

    # /help Command
    @nextcord.slash_command(name="help", description="Shows detailed info of all commands")
    async def help_command(self, interaction: nextcord.Interaction):
     embed = nextcord.Embed(
        title="Help Command",
        description="Here's a list of all available commands with their descriptions. Use `/command` to execute any of them!",
        color=nextcord.Color.blue()
    )
    
     embed.add_field(
        name="🛠️ General Commands",
        value=(
            "**/smile** - Responds with a smiley emoji.\n"
            "**/roll** - Rolls a dice and gets a random number between 1 and 6.\n"
            "**/joke** - Fetches a random joke.\n"
            "**/userinfo** - Fetches information about an user.\n"
            "**/choose** - Chooses one option from up to 5 choices."
        ),
        inline=False
    )
     
     embed.add_field(
        name="🔧 Admin Commands",
        value=(
            "**/clear** - Clears a specified number of messages (1-5000).\n"
            "**/timeout** - Timeout an user for a specified duration."
        ),
        inline=False
    )
     embed.set_footer(text="For more information, please DM the Supreme Leader.")
     
     await interaction.response.send_message(embed=embed)

def setup(bot):
    bot.add_cog(MyCommands(bot))
                                                    
